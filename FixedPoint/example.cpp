
// NOTE: This code was generated by AI and has not been verified or tested.
// It is for reference purposes only and should NOT be used in production or
// testing environments.

#include <cassert>
#include <iostream>

#include "fixedpoint.h"

int main() {
  // Example 1: Basic usage with your requested functions
  std::cout << "=== Basic Usage Example ===" << std::endl;

  // 12.3481 is represented as FixedPoint(123481, 4)
  FixedPoint fp1(123481, 4);  // Represents 12.3481

  // Using the three requested functions
  std::string str_value = to_string(fp1);
  double dbl_value = to_double(fp1);
  int int_value = to_int(fp1);

  std::cout << "FixedPoint(123481, 4) represents: " << std::endl;
  std::cout << "  to_string(): " << str_value << std::endl;
  std::cout << "  to_double(): " << dbl_value << std::endl;
  std::cout << "  to_int(): " << int_value << std::endl;

  // Example 2: Different precision values
  std::cout << "\n=== Different Precision Examples ===" << std::endl;
  FixedPoint fp2(525, 2);   // 5.25
  FixedPoint fp3(1005, 1);  // 100.5
  FixedPoint fp4(42, 0);    // 42 (integer)
  FixedPoint fp5(7, 3);     // 0.007

  std::cout << "FixedPoint(525, 2) = " << to_string(fp2) << std::endl;
  std::cout << "FixedPoint(1005, 1) = " << to_string(fp3) << std::endl;
  std::cout << "FixedPoint(42, 0) = " << to_string(fp4) << std::endl;
  std::cout << "FixedPoint(7, 3) = " << to_string(fp5) << std::endl;

  // Example 3: Creating from double
  std::cout << "\n=== Creating from double ===" << std::endl;
  FixedPoint fp6 =
      fputil::from_double(3.14159, 5);  // Will be FixedPoint(314159, 5)
  FixedPoint fp7 = fputil::from_double(2.5, 1);  // Will be FixedPoint(25, 1)

  std::cout << "from_double(3.14159, 5) = " << to_string(fp6)
            << " [value=" << fp6.value << ", precision=" << fp6.precision << "]"
            << std::endl;
  std::cout << "from_double(2.5, 1) = " << to_string(fp7)
            << " [value=" << fp7.value << ", precision=" << fp7.precision << "]"
            << std::endl;

  // Example 4: Arithmetic operations
  std::cout << "\n=== Arithmetic Operations ===" << std::endl;
  FixedPoint a(550, 2);  // 5.50
  FixedPoint b(225, 2);  // 2.25

  FixedPoint sum = a + b;
  FixedPoint diff = a - b;
  FixedPoint prod = a * b;
  FixedPoint quot = a / b;

  std::cout << to_string(a) << " + " << to_string(b) << " = " << to_string(sum)
            << std::endl;
  std::cout << to_string(a) << " - " << to_string(b) << " = " << to_string(diff)
            << std::endl;
  std::cout << to_string(a) << " * " << to_string(b) << " = " << to_string(prod)
            << std::endl;
  std::cout << to_string(a) << " / " << to_string(b) << " = " << to_string(quot)
            << std::endl;

  // Example 5: Mixed precision arithmetic
  std::cout << "\n=== Mixed Precision Arithmetic ===" << std::endl;
  FixedPoint x(123, 1);   // 12.3
  FixedPoint y(4567, 3);  // 4.567

  FixedPoint sum2 = x + y;
  std::cout << to_string(x) << " + " << to_string(y) << " = " << to_string(sum2)
            << std::endl;

  // Example 6: Comparison operations
  std::cout << "\n=== Comparison Operations ===" << std::endl;
  FixedPoint c1(1000, 2);  // 10.00
  FixedPoint c2(100, 1);   // 10.0
  FixedPoint c3(101, 1);   // 10.1

  std::cout << to_string(c1) << " == " << to_string(c2) << " : "
            << (c1 == c2 ? "true" : "false") << std::endl;
  std::cout << to_string(c1) << " < " << to_string(c3) << " : "
            << (c1 < c3 ? "true" : "false") << std::endl;
  std::cout << to_string(c3) << " > " << to_string(c1) << " : "
            << (c3 > c1 ? "true" : "false") << std::endl;

  // Example 7: String parsing
  std::cout << "\n=== String Parsing ===" << std::endl;
  try {
    FixedPoint fp8 = fputil::from_string("123.456");
    std::cout << "Parsed '123.456' to FixedPoint(" << fp8.value << ", "
              << fp8.precision << ") = " << to_string(fp8) << std::endl;

    FixedPoint fp9 = fputil::from_string("-99.9");
    std::cout << "Parsed '-99.9' to FixedPoint(" << fp9.value << ", "
              << fp9.precision << ") = " << to_string(fp9) << std::endl;

    FixedPoint fp10 = fputil::from_string("42");
    std::cout << "Parsed '42' to FixedPoint(" << fp10.value << ", "
              << fp10.precision << ") = " << to_string(fp10) << std::endl;
  } catch (const std::exception& e) {
    std::cerr << "Error: " << e.what() << std::endl;
  }

  // Example 8: Edge cases
  std::cout << "\n=== Edge Cases ===" << std::endl;
  FixedPoint zero(0, 0);
  FixedPoint negative(-5750, 3);  // -5.750
  FixedPoint small(1, 6);         // 0.000001

  std::cout << "Zero: " << to_string(zero) << std::endl;
  std::cout << "Negative: " << to_string(negative) << std::endl;
  std::cout << "Very small: " << to_string(small) << std::endl;

  // Example 9: Precision control in output
  std::cout << "\n=== Output Precision Control ===" << std::endl;
  FixedPoint pi(31415926, 7);  // 3.1415926
  std::cout << "Default output: " << fputil::to_string(pi) << std::endl;
  std::cout << "2 decimal places: " << fputil::to_string_formatted(pi, 2)
            << std::endl;
  std::cout << "4 decimal places: " << fputil::to_string_formatted(pi, 4)
            << std::endl;

  // Division by zero handling
  std::cout << "\n=== Error Handling ===" << std::endl;
  try {
    FixedPoint result = fp1 / zero;
  } catch (const std::domain_error& e) {
    std::cout << "Caught expected error: " << e.what() << std::endl;
  }

  return 0;
}
