// NOTE: This code was generated by AI and has not been verified or tested.
// It is for reference purposes only and should NOT be used in production or
// testing environments.

#ifndef FIXEDPOINT_H
#define FIXEDPOINT_H

#include <cstdint>
#include <fpm/fixed.hpp>
#include <fpm/ios.hpp>
#include <string>

// Your custom FixedPoint structure
struct FixedPoint {
  int value;               // Complete value as integer
  unsigned int precision;  // Number of decimal places from the right

  FixedPoint(int value = 0, unsigned int precision = 0)
      : value(value), precision(precision) {}
};

// Namespace for fixed-point utilities
namespace fputil {

// Type alias for the internal fpm fixed-point type
// Using 16.16 format for balanced precision and range
using fpm_type = fpm::fixed_16_16;

// Configuration constants
constexpr int DEFAULT_STRING_PRECISION = 6;
constexpr int DEFAULT_FRACTIONAL_DIGITS = 6;
constexpr int MAX_PRECISION =
    9;  // Maximum precision to avoid overflow with int32

// Conversion functions (optimized for performance)
std::string to_string(const FixedPoint& fp);
std::string to_string_formatted(const FixedPoint& fp, int precision);
double to_double(const FixedPoint& fp);
int to_int(const FixedPoint& fp);

// Additional utility functions
FixedPoint from_double(double value,
                       unsigned int precision = DEFAULT_FRACTIONAL_DIGITS);
FixedPoint from_string(const std::string& str);

// Arithmetic operations
FixedPoint add(const FixedPoint& a, const FixedPoint& b);
FixedPoint subtract(const FixedPoint& a, const FixedPoint& b);
FixedPoint multiply(const FixedPoint& a, const FixedPoint& b);
FixedPoint divide(const FixedPoint& a, const FixedPoint& b);

// Comparison operations (optimized)
bool equals(const FixedPoint& a, const FixedPoint& b);
bool less_than(const FixedPoint& a, const FixedPoint& b);
bool greater_than(const FixedPoint& a, const FixedPoint& b);

// Internal utilities for performance
namespace internal {
// Fast power of 10 lookup table
constexpr int64_t pow10_table[] = {
    1LL,       10LL,       100LL,       1000LL,       10000LL,      100000LL,
    1000000LL, 10000000LL, 100000000LL, 1000000000LL, 10000000000LL};

inline int64_t fast_pow10(unsigned int exp) {
  return (exp <= 10) ? pow10_table[exp] : 0;
}

fpm_type to_fpm(const FixedPoint& fp);
FixedPoint from_fpm(const fpm_type& value, unsigned int precision);
std::pair<FixedPoint, FixedPoint> normalize_precision(const FixedPoint& a,
                                                      const FixedPoint& b);
}  // namespace internal
}  // namespace fputil

// Operator overloads for FixedPoint
bool operator==(const FixedPoint& a, const FixedPoint& b);
bool operator!=(const FixedPoint& a, const FixedPoint& b);
bool operator<(const FixedPoint& a, const FixedPoint& b);
bool operator>(const FixedPoint& a, const FixedPoint& b);
bool operator<=(const FixedPoint& a, const FixedPoint& b);
bool operator>=(const FixedPoint& a, const FixedPoint& b);

FixedPoint operator+(const FixedPoint& a, const FixedPoint& b);
FixedPoint operator-(const FixedPoint& a, const FixedPoint& b);
FixedPoint operator*(const FixedPoint& a, const FixedPoint& b);
FixedPoint operator/(const FixedPoint& a, const FixedPoint& b);

// Stream operators
std::ostream& operator<<(std::ostream& os, const FixedPoint& fp);
std::istream& operator>>(std::istream& is, FixedPoint& fp);

// Global functions (required interface)
std::string to_string(FixedPoint fp);
double to_double(FixedPoint fp);
int to_int(FixedPoint fp);

#endif  // FIXEDPOINT_H
